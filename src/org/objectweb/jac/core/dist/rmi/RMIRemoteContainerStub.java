/*
  Copyright (C) 2001 Lionel Seinturier

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation; either version 2 of the
  License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser Generaly Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA */

package org.objectweb.jac.core.dist.rmi;

import java.io.Serializable;
import java.rmi.RemoteException;
import org.apache.log4j.Logger;
import org.objectweb.jac.core.dist.RemoteContainer;
import org.objectweb.jac.core.dist.RemoteRef;

/**
 * RMIRemoteContainerStub acts as a client stub to access a remote container.
 *
 * RMIRemoteContainerStub holds a RMIRemoteContainer_Stub instance.
 * This is the client stub of the remote RMIRemoteContainer object that owns as
 * a delegate the container that is to be accessed.
 *
 * Note: what we need is an instance of something that extends RemoteContainer.
 * But we can't have an object that is both a client stub for a remote RMI
 * object and a RemoteContainer (no multiple inheritance in Java).
 * So we implemented this delegating scheme where:
 * <ul>
 * <li> RMIRemoteContainerStub (which is a RemoteContainer) delegates its job
 *   to a RMIRemoteContainer client stub (generated by rmic) </li>
 * <li> which itself transmits it to a remote RMIRemoteContainer object, </li>
 * <li> which itself delegates it to a final RemoteContainer object. </li>
 * </ul>
 *
 * @see org.objectweb.jac.core.dist.rmi.RMIRemoteContainer
 *
 * @author <a href="http://www-src.lip6.fr/homepages/Lionel.Seinturier/index-eng.html">Lionel Seinturier</a>
 */
 
public class RMIRemoteContainerStub
    extends RemoteContainer implements Serializable 
{
    static Logger logger = Logger.getLogger("dist.rmi");

    /**
     * The RMI stub where the job is to be delegated.
     */
   
    protected RMIRemoteContainerInterf delegate;
   

    /**
     * Create a new remote container stub.
     *
     * @param delegate  the stub where the job is to be delegated
     * @param name      the name of the remote container
     */
   
    public RMIRemoteContainerStub(RMIRemoteContainerInterf delegate,
                                  String name)
    {
        this.delegate = delegate;
        this.name = name;
    }
   

    /**
     * This method instantiates a className object.
     * Clients call it to remotely instantiate an object.
     * instantiates creates an object and returns its index.
     *
     * @param className  the class name to instantiate
     * @param args       initialization arguments for the instantiation
     * @param fields     the object fields that are part of the state
     * @param state      the state to copy
     * @param collaboration the collaboration of the client
     * @return           the index of the className object
     */
   
    public int instantiates(String name, String className, Object[] args,
                            String[] fields, byte[] state,
                            byte[] collaboration) 
    {
        logger.debug(this.name+".instantiates("+name+")");
        try {
            return delegate.instantiates(name, className, args, fields, state, 
                                         collaboration);
        } catch (RemoteException e) { 
            e.printStackTrace(); 
        }
      
        return 0;
    }


    /**
     * Copy a state into a base object.
     *
     * @param index   the callee index (see org.objectweb.jac.core.JacObject)
     * @param fields  the object fields that are part of the state
     * @param state   the state to copy
     * @param collaboration the collaboration of the client
     */
    
    public void copy(String name, int index, String[] fields, byte[] state,
                     byte[] collaboration) {

        try {
            delegate.copy( name, index, fields, state, collaboration );
        } catch(RemoteException e) { 
            e.printStackTrace(); 
        }
    }
   
   
    /**
     * Invoke a method on a base object.
     *
     * The base object is the remote counterpart of a local object
     * that has been remotely instantiated by the org.objectweb.jac.dist.Distd daemon.
     *
     * @param index       the callee index (see org.objectweb.jac.core.JacObject)
     * @param methodName  the callee method name
     * @param methodArgs  the callee method arguments
     * @return            the result
     */
   
    public byte[] invoke(int index, String methodName, 
                         byte[] methodArgs, byte[] collaboration) {
      
        try {
            return delegate.invoke(index, methodName, methodArgs, collaboration);
        } catch(RemoteException e) { 
            e.printStackTrace(); 
        }
      
        return null;
    }

    public byte[] invokeRoleMethod(int index, 
                                   String methodName, 
                                   byte[] methodArgs, 
                                   byte[] collaboration) 
    {
        try {
            return delegate.invokeRoleMethod(index,methodName,
                                             methodArgs,collaboration);
        } catch(RemoteException e) { 
            e.printStackTrace(); 
        }
        return null;
    }

    public byte[] getByteCodeFor(String className) {
        try {
            return delegate.getByteCodeFor(className);
        } catch(RemoteException e) { 
            e.printStackTrace(); 
        }
        return null;
    }

    /**
     * Returns a remote reference on the object corresponding to the
     * given name. */

    public RemoteRef bindTo(String name) {
        RemoteRef result=null;
        try {
            logger.debug("binding to "+name+" (delegate="+delegate+")");
            result=delegate.bindTo( name );
            logger.debug("result is "+result);
        } catch(RemoteException e) { 
            e.printStackTrace(); 
        }
        return result;
    }


    //    /**
    //     * Get a client stub wrapping chain for a given object.
    //     *
    //     * This method is called whenever a daemon receives as a parameter
    //     * a reference to a remote object, to get the wrapping chain
    //     * (for instance an authentication wrapper, a verbose wrapper, ...)
    //     * needed to create a client stub for this remote reference.
    //     *
    //     * @param index  the base object index (see org.objectweb.jac.core.JacObject)
    //     * @return       the client stub wrapping chain as a serialized object
    //     */
    //    
    //    public Vector getClientStubWrappingChain( int index ) {
    //    
    //       try {
    //          return delegate.getClientStubWrappingChain( index );
    //       }
    //       catch( RemoteException e ) { e.printStackTrace(); }
    //       
    //       return null;
    //    }

}
